  const { colors } = useTheme();
  const soundRef = useRef(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [progressSeconds, setProgressSeconds] = useState(0);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [liked, setLiked] = useState(false);
  const { data, status } = useSelector((state) => state.data);
  const dispatch = useDispatch();

  const audioUrl = "https://www.youtube.com/watch?v=kPa7bsKwL-c";

  //const SERVER = "http://192.168.1.48:80/api/stream";
  //`${SERVER}?url=${encodeURIComponent(audioUrl)}`
  const streamUrl =
    typeof Constants.expoConfig.extra.SERVER !== "undefined"
      ? `${
          Constants.expoConfig.extra.SERVER
        }/api/stream?url=${encodeURIComponent(audioUrl)}`
      : audioUrl; // fallback to direct URL if SERVER is undefined

  useEffect(() => {
    if (data) {
      //console.log("data:",data);
      loadAudio();
    }

    return () => {
      console.log("hi");
    };
  }, [data]);
  useEffect(() => {
    console.log("sec:", progressSeconds);
    console.log("isPlaying?...:", isPlaying);
  }, [progressSeconds, isPlaying]);
  // useEffect(() => {
  //   if (isPlaying && soundRef.current) {
  //     const intervalId = setInterval(() => {
  //       soundRef.current.getStatusAsync().then((status) => {
  //         if (status.isLoaded && typeof status.positionMillis === 'number') {
  //           setProgressSeconds(Math.floor(status.positionMillis / 1000));
  //         }
  //       });
  //     }, 1000);

  //     return () => clearInterval(intervalId);
  //   }
  // }, [isPlaying]);
  // useEffect(() => {
  //   dispatch(
  //     FetchMetadata({ text: "https://www.youtube.com/watch?v=pQq9eP5OFhw" })
  //   );
  // }, []);
  const loadAudio = async () => {
    try {
      if (data) {
        if (soundRef.current) {
          await soundRef.current.unloadAsync();
          soundRef.current = null;
        }
        setProgressSeconds(0);
        await Audio.setAudioModeAsync({
          allowsRecordingIOS: false,
          staysActiveInBackground: true,
          playsInSilentModeIOS: true,
          shouldDuckAndroid: true,
          playThroughEarpieceAndroid: false,
        });

        const { sound } = await Audio.Sound.createAsync(
          { uri: streamUrl },
          { shouldPlay: false, progressUpdateIntervalMillis: 1060 },
          onPlaybackStatusUpdate
        );
        soundRef.current = sound;
        sound.setOnPlaybackStatusUpdate((status) => {
          // console.log("isPlaying:", status.isPlaying, "positionMillis:", status.positionMillis);
          onPlaybackStatusUpdate(status);
        });
        console.log("Audio Loaded", soundRef.current);
      }
    } catch (error) {
      console.log("Error loading audio:", error);
    }
  };